name: Deploy to Production

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1
  AWS_ACCOUNT_ID: "569476542657"
  ECR_REPOSITORY: rails-app
  ECS_SERVICE: rails-app-production-service
  ECS_CLUSTER: rails-app-production-cluster
  ECS_TASK_DEFINITION: rails-app-production-rails
  CONTAINER_NAME: rails-app

permissions:
  contents: read
  id-token: write  # Required for OIDC

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
        role-session-name: production-deploy-session
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        echo "üî® Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "üì§ Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Image pushed successfully: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download current task definition
      run: |
        echo "üì• Downloading current ECS task definition..."
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        
        # Check service status
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].status' \
          --output text)
        
        RUNNING_COUNT=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].runningCount' \
          --output text)
        
        DESIRED_COUNT=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].desiredCount' \
          --output text)
        
        echo "Service Status: $SERVICE_STATUS"
        echo "Running Tasks: $RUNNING_COUNT/$DESIRED_COUNT"
        
        if [ "$SERVICE_STATUS" = "ACTIVE" ] && [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ]; then
          echo "‚úÖ Deployment verified successfully!"
        else
          echo "‚ùå Deployment verification failed!"
          exit 1
        fi

    - name: Test application health
      run: |
        echo "üè• Testing application health..."
        
        # Wait a bit for the new tasks to be ready
        sleep 30
        
        # Test health endpoint
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          http://rails-app-production-alb-1095994827.ap-northeast-1.elb.amazonaws.com/health || echo "000")
        
        if [ "$HEALTH_STATUS" = "200" ]; then
          echo "‚úÖ Health check passed (HTTP $HEALTH_STATUS)"
        else
          echo "‚ö†Ô∏è  Health check returned HTTP $HEALTH_STATUS"
          echo "This might be expected during deployment. Please verify manually."
        fi

    - name: Deployment summary
      run: |
        echo "üéâ **Deployment Summary**"
        echo "======================="
        echo "‚úÖ Docker image built and pushed to ECR"
        echo "‚úÖ ECS task definition updated"
        echo "‚úÖ Service deployment completed"
        echo "‚úÖ Service stability achieved"
        echo ""
        echo "üîó **Application URLs:**"
        echo "Application: http://rails-app-production-alb-1095994827.ap-northeast-1.elb.amazonaws.com"
        echo "Health Check: http://rails-app-production-alb-1095994827.ap-northeast-1.elb.amazonaws.com/health"
        echo ""
        echo "üìã **Deployment Details:**"
        echo "Image: ${{ steps.build-image.outputs.image }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Deployed by: ${{ github.actor }}"
